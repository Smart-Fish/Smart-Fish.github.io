<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>w3ctech</title>
  
  <subtitle>w3ctech</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-15T12:28:37.148Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>w3ctech</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Canvas——保存和恢复绘图状态</title>
    <link href="http://yoursite.com/2018/04/15/canvas-save-restore-drawing-status/"/>
    <id>http://yoursite.com/2018/04/15/canvas-save-restore-drawing-status/</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-04-15T12:28:37.148Z</updated>
    
    <content type="html"><![CDATA[<p>###画布绘图状态</p><p>描述某一时刻2D渲染上下文外观的整套属性，从简单的颜色值到复杂的变换矩阵及其他特性。</p><p>描述画布绘图状态的全部属性</p><p>变换矩阵、裁剪区域、globalAlpha、globalCompositeOperation、strokeStyle、fillStyle、lineWidth、lineCap、lineJoin、miterLimit、shadowOffsetX、shadowOffsetY、shadowBlur、shadowColor、font、textAlign 和 textBaseline.</p><p>保存绘图状态——save()</p><p>当你保存绘图状态时，2D渲染上下文会保存一个绘图状态栈，它是一组之前保存的状态，其中最近保存的状态位于顶部——就像一张纸。绘图状态的默认栈是空的，调用save方法，就会有一个新状态被添加到这个栈。多次调用save方法，就可以将多个绘图状态逐一保存到栈中，其中最早的状态在底部。（下面的例子调用了save()方法保存了fillStyle = “red”状态。）</p><p>恢复绘图状态——restore()</p><p>通过调用restore方法，你能够自动取出最后添加到栈中的绘图状态，并将它应用于2D渲染上下文，用所保存的状态覆盖全部现有的样式。（下面的例子在设置了fillStyle = “blue”之后又调用了restore()方法恢复了之前已有的fillStyle = “red”状态。）</p><iframe height="265" scrolling="no" title="保存和恢复多个绘图状态" src="//codepen.io/w4ctech/embed/zWVmYJ/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/zWVmYJ/" target="_blank" rel="noopener">保存和恢复多个绘图状态</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###画布绘图状态&lt;/p&gt;
&lt;p&gt;描述某一时刻2D渲染上下文外观的整套属性，从简单的颜色值到复杂的变换矩阵及其他特性。&lt;/p&gt;
&lt;p&gt;描述画布绘图状态的全部属性&lt;/p&gt;
&lt;p&gt;变换矩阵、裁剪区域、globalAlpha、globalCompositeOperation、st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/04/13/index/"/>
    <id>http://yoursite.com/2018/04/13/index/</id>
    <published>2018-04-13T11:08:09.578Z</published>
    <updated>2018-04-13T11:08:35.484Z</updated>
    
    <content type="html"><![CDATA[<p>hello word!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hello word!&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/13/hello-world/"/>
    <id>http://yoursite.com/2018/04/13/hello-world/</id>
    <published>2018-04-13T10:05:11.136Z</published>
    <updated>2018-04-13T10:05:11.137Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>总结js循环遍历</title>
    <link href="http://yoursite.com/2018/04/03/js%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2018/04/03/js循环遍历/</id>
    <published>2018-04-02T16:00:00.000Z</published>
    <updated>2018-04-15T12:15:41.217Z</updated>
    
    <content type="html"><![CDATA[<pre><code>js 遍历分为遍历数组(array)和遍历对象(object)js遍历对象的方法 有11111111111111111111111111111111111111111111</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;js 遍历分为遍历数组(array)和遍历对象(object)
js遍历对象的方法 有11111111111111111111111111111111111111111111
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
