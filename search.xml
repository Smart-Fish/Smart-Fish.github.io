<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>最新激活windows方法</title>
      <link href="/2018/05/08/activation-windows/"/>
      <url>/2018/05/08/activation-windows/</url>
      <content type="html"><![CDATA[<h5 id="Kms激活方法1"><a href="#Kms激活方法1" class="headerlink" title="Kms激活方法1:"></a>Kms激活方法1:</h5><h6 id="1-下载-https-kms-5ibug-org-download-php"><a href="#1-下载-https-kms-5ibug-org-download-php" class="headerlink" title="1.下载 https://kms.5ibug.org/download.php;"></a>1.下载 <a href="https://kms.5ibug.org/download.php" target="_blank" rel="noopener">https://kms.5ibug.org/download.php</a>;</h6><h6 id="2-运行-kms-bat。"><a href="#2-运行-kms-bat。" class="headerlink" title="2.运行 kms.bat。"></a>2.运行 kms.bat。</h6><h5 id="Kms激活方法2"><a href="#Kms激活方法2" class="headerlink" title="Kms激活方法2:"></a>Kms激活方法2:</h5><h6 id="1-管理员身份打开cmd窗口"><a href="#1-管理员身份打开cmd窗口" class="headerlink" title="1.管理员身份打开cmd窗口;"></a>1.管理员身份打开cmd窗口;</h6><h6 id="2-进入到system32文件夹"><a href="#2-进入到system32文件夹" class="headerlink" title="2.进入到system32文件夹;"></a>2.进入到system32文件夹;</h6><h6 id="3-执行下列命令："><a href="#3-执行下列命令：" class="headerlink" title="3.执行下列命令："></a>3.执行下列命令：</h6><p><code>slmgr /skms kms.5ibug.org</code><br><code>slmgr /ato</code><br><code>slmgr /xpr</code></p>]]></content>
      
      <categories>
          
          <category> ohter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue Notes-vue-router</title>
      <link href="/2018/04/28/vue-router/"/>
      <url>/2018/04/28/vue-router/</url>
      <content type="html"><![CDATA[<iframe height="265" scrolling="no" title="vue-router-SinglePage" src="//codepen.io/w4ctech/embed/ereByX/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/ereByX/" target="_blank" rel="noopener">vue-router-SinglePage</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="路由中有三个基本的概念-route-routes-router！"><a href="#路由中有三个基本的概念-route-routes-router！" class="headerlink" title="路由中有三个基本的概念 route; routes;router！"></a>路由中有三个基本的概念 <code>route</code>; <code>routes</code>;<code>router</code>！</h2><h3 id="route即单条路由-home按钮对应home的内容-为一条路由-link按钮对应link内容-为另外一条路由-about按钮对应about内容-为第三条路由……"><a href="#route即单条路由-home按钮对应home的内容-为一条路由-link按钮对应link内容-为另外一条路由-about按钮对应about内容-为第三条路由……" class="headerlink" title="route即单条路由 home按钮对应home的内容,为一条路由;link按钮对应link内容,为另外一条路由;about按钮对应about内容,为第三条路由……"></a><code>route</code>即单条路由 home按钮对应home的内容,为一条路由;link按钮对应link内容,为另外一条路由;about按钮对应about内容,为第三条路由……</h3><h3 id="routes指一组路由-将单条路由结合起来。-home-按钮-gt-home内容-link按钮-gt-link-内容-ablout按钮-gt-about内容-……"><a href="#routes指一组路由-将单条路由结合起来。-home-按钮-gt-home内容-link按钮-gt-link-内容-ablout按钮-gt-about内容-……" class="headerlink" title="routes指一组路由,将单条路由结合起来。[{home 按钮 =&gt;home内容 },{ link按钮 =&gt; link 内容},{ ablout按钮 =&gt; about内容}……]"></a><code>routes</code>指一组路由,将单条路由结合起来。[{home 按钮 =&gt;home内容 },{ link按钮 =&gt; link 内容},{ ablout按钮 =&gt; about内容}……]</h3><h3 id="router-是一个用来管理路由的机制-因为routes只定义了一组路由。需要将定义的路由挂载到router上-页面才能展示routes的内容。"><a href="#router-是一个用来管理路由的机制-因为routes只定义了一组路由。需要将定义的路由挂载到router上-页面才能展示routes的内容。" class="headerlink" title="router 是一个用来管理路由的机制,因为routes只定义了一组路由。需要将定义的路由挂载到router上,页面才能展示routes的内容。"></a><code>router</code> 是一个用来管理路由的机制,因为routes只定义了一组路由。需要将定义的路由挂载到router上,页面才能展示routes的内容。</h3><details><br><br><summary>vue路由的基本格式： </summary><br><br>html:<br><br>        <body><br>            <div id="app"><br>           <router-link to="/home">home</router-link><br>           <router-link to="/link">link</router-link><br>           <router-link to="/about">about</router-link><br>           // 多条router-link……<br>           <router-view></router-view><br>            </div><br>        </body><br><br><br><br>js:<br><br>        var home = {template: ‘<div>this is home view</div>‘}<br>        var link = {template: ‘<div>this is link view</div>‘}<br>        var about = {template: ‘<div>this is about view</div>‘}<br>        // 多条定义模板语句……<br><br><br>        //多条路由，组成一个routes<br>        var routes = [<br>             {path: ‘/home’, component:home},<br>             {path: ‘/link’, component: link},<br>            {path: ‘/about’, component: about}<br>        //多条路由配置信息…..<br>        ]<br>        //创建router 对路由进行管理<br>        var router = new VueRouter({<br>             routes // routes: routes 的简写<br>        })<br>        //由构造函数 new vueRouter() 创建，接受routes 参数<br><br>        配置完成后，把router 实例注入到 vue 根实例中<br>        var app = new Vue({<br>          router<br>        }).$mount(‘#app’)<br><br></details>  ]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue学习笔记-vue的生命周期</title>
      <link href="/2018/04/26/vue-life-cycle/"/>
      <url>/2018/04/26/vue-life-cycle/</url>
      <content type="html"><![CDATA[<p>vue的生命周期？</p><p>vue实例从创建到销毁的过程称之为vue的生命周期:</p><p><a href="https://simimg.com/i/8lAxn" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/04/28/8lAxn.png" alt="理解vue生命周期"></a></p><p>vue的整个生命周期中会有很多钩子函数在vue生命周期不同的时刻进行操作：<br><a href="https://simimg.com/i/88E8A" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/04/29/88E8A.md.png" alt="vue-life-cycle"></a></p><ol><li><code>beforeCreate</code><br><img src="https://s1.ax2x.com/2018/04/29/88eHO.png" alt="beforeCreate 创建前状态"></li><li><code>created</code><br><img src="https://s1.ax2x.com/2018/04/29/88Uuq.png" alt="created 创建后状态"></li><li><code>beforeMount</code><br><img src="https://s1.ax2x.com/2018/04/29/88Kte.png" alt="beforeMount 挂载前状态"></li><li><code>mounted</code><br><img src="https://s1.ax2x.com/2018/04/29/88A3d.png" alt="mounted 挂载结束状态"><br><a href="https://simimg.com/i/88tGR" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/04/29/88tGR.png" alt="88tGR.png"></a></li><li><code>beforeUpdate</code>     数据更新时调用，但不进行DOM重新渲染。</li><li><code>updated</code>            这个状态下数据更新并且DOM重新渲染。</li><li><code>beforeDestroy</code>    实例销毁之前调用。</li><li><code>destroyed</code>        Vue实例销毁后调用。</li></ol>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue生命周期 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue学习笔记-vue组件</title>
      <link href="/2018/04/24/vue-package/"/>
      <url>/2018/04/24/vue-package/</url>
      <content type="html"><![CDATA[<h2 id="一-vue组件："><a href="#一-vue组件：" class="headerlink" title="一.vue组件："></a>一.vue组件：</h2><p>1.全局组件用Vue.component()方法，先传入一个自定义组件的名字，然后再进行配置，所有的Vue实例都可以使用。<br>2.局部组件过某个Vue实例的实例选项components属性来注册多个组件。</p><h3 id="1-全局组件和局部组件"><a href="#1-全局组件和局部组件" class="headerlink" title="1.全局组件和局部组件"></a>1.全局组件和局部组件</h3><iframe height="265" scrolling="no" title="vue定义组件基本格式" src="//codepen.io/w4ctech/embed/PeNpQN/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/PeNpQN/" target="_blank" rel="noopener">vue定义组件基本格式</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h4 id="全局组件语法"><a href="#全局组件语法" class="headerlink" title="全局组件语法"></a>全局组件语法</h4><pre><code>    Vue.component(&#39;模板名&#39;, {        template：// 组件内容    })    new Vue({        el: &#39;绑定的id&#39;,        data:{        },        methods:{        }    })</code></pre><h4 id="局部组件语法"><a href="#局部组件语法" class="headerlink" title="局部组件语法"></a>局部组件语法</h4><pre><code>    var app = new Vue({        el: &#39;#绑定的id&#39;,        data: {        },        methods:{        }        components: {        &#39;组件名1&#39;: {            template: //模板内容,        }，       &#39;组件名2&#39;: {            template: //模板内容,        }，        }    })</code></pre><p>自定义组件注意事项<br><img src="https://s1.ax2x.com/2018/04/24/8sVVJ.png" alt="自定义组件注意事项"></p>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue组件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue学习笔记-vue指令、vue条件语句</title>
      <link href="/2018/04/23/vue-notes-grammar/"/>
      <url>/2018/04/23/vue-notes-grammar/</url>
      <content type="html"><![CDATA[<h2 id="一-vue语法指令："><a href="#一-vue语法指令：" class="headerlink" title="一.vue语法指令："></a>一.vue语法指令：</h2><p>vue的指令是将js的vue实例绑定至html元素，通过vue实例中的data内的属性或者methods内的方法，对所绑定的子元素进行操作。</p><details><br><br><summary>vue语法的基本格式： </summary><br><br>html:<br><br>        <body><br>            <div id="app"><br>            // vue code<br>            </div><br>        </body><br><br><br><br>js:<br><br>        var vm =new Vue({                // new Vue vue格式固定语法<br>            el:’#app’,                   // 绑定id<br>            data:{                       // data 用来操作html<br>                vuehello:”hello vue”     //标签：’内容’   可以为对象<br>            },<br>            methods:{                    //methods 用来操作dom<br>                click(){                 //js 事件名<br>                    alert(233)           //js 事件<br>                }<br>            }<br>        })<br><br></details>  <h3 id="1-插值表达式"><a href="#1-插值表达式" class="headerlink" title="1.插值表达式"></a>1.插值表达式</h3><iframe height="265" scrolling="no" title="vue.js" src="//codepen.io/w4ctech/embed/jxWBbw/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/jxWBbw/" target="_blank" rel="noopener">vue.js</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="2-v-model"><a href="#2-v-model" class="headerlink" title="2.v-model"></a>2.v-model</h3><iframe height="265" scrolling="no" title="v-model" src="//codepen.io/w4ctech/embed/pVgwXP/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/pVgwXP/" target="_blank" rel="noopener">v-model</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>v-model是双向数据绑定的，一般用于input标签！</p><h3 id="3-v-text"><a href="#3-v-text" class="headerlink" title="3.v-text"></a>3.v-text</h3><iframe height="265" scrolling="no" title="v-text" src="//codepen.io/w4ctech/embed/XqXaNB/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/XqXaNB/" target="_blank" rel="noopener">v-text</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>v-text用来操作文本，会替换对应标签内的值<br><iframe height="265" scrolling="no" title="v-text替换原有标签的值" src="//codepen.io/w4ctech/embed/KRVboZ/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/KRVboZ/" target="_blank" rel="noopener">v-text替换原有标签的值</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></p><p><a href="https://s1.ax2x.com/2018/04/24/8MmZr.png" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/04/24/8MmZr.png" alt="v-text替换标签内的值"></a></p><h3 id="4-v-html"><a href="#4-v-html" class="headerlink" title="4.v-html"></a>4.v-html</h3><iframe height="265" scrolling="no" title="v-html" src="//codepen.io/w4ctech/embed/rvxzwZ/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/rvxzwZ/" target="_blank" rel="noopener">v-html</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>v-html用于输出html,可以将标签内的html标签解析后输出</p><h3 id="5-v-bind"><a href="#5-v-bind" class="headerlink" title="5.v-bind"></a>5.v-bind</h3><iframe height="265" scrolling="no" title="v-bind" src="//codepen.io/w4ctech/embed/ELPvOz/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/ELPvOz/" target="_blank" rel="noopener">v-bind</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>v-bind的语法是<code>v-bind:css标签属性=&quot;vue标签名&quot;</code><br>v-bind 与中间的属性无联系 与data里面的属性绑定<br><a href="https://s1.ax2x.com/2018/04/24/8MzNY.png" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/04/24/8MzNY.png" alt="v-text替换标签内的值"></a><br>v-bind的简写形式<code>:css标签属性=&quot;vue标签名&quot;</code><br><a href="https://s1.ax2x.com/2018/04/24/8MY9i.png" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/04/24/8MY9i.png" alt="v-text替换标签内的值"></a></p><h3 id="v-bind的基本用法"><a href="#v-bind的基本用法" class="headerlink" title="v-bind的基本用法"></a>v-bind的基本用法</h3><h4 id="v-bind-style"><a href="#v-bind-style" class="headerlink" title="v-bind:style"></a>v-bind:style</h4><h5 id="js控制css是否显示"><a href="#js控制css是否显示" class="headerlink" title="js控制css是否显示"></a>js控制css是否显示</h5><iframe height="265" scrolling="no" title="v-bind" src="//codepen.io/w4ctech/embed/RyrdWJ/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/RyrdWJ/" target="_blank" rel="noopener">v-bind</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h5 id="vue语法定义css样式"><a href="#vue语法定义css样式" class="headerlink" title="vue语法定义css样式"></a>vue语法定义css样式</h5><h6 id="直接定义："><a href="#直接定义：" class="headerlink" title="直接定义："></a>直接定义：</h6><iframe height="265" scrolling="no" title=".v-bind:style" src="//codepen.io/w4ctech/embed/yjewVY/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/yjewVY/" target="_blank" rel="noopener">.v-bind:style</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h6 id="使用对象定义："><a href="#使用对象定义：" class="headerlink" title="使用对象定义："></a>使用对象定义：</h6><iframe height="265" scrolling="no" title="v-bind:style" src="//codepen.io/w4ctech/embed/yjewzO/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/yjewzO/" target="_blank" rel="noopener">v-bind:style</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h6 id="三元表达式："><a href="#三元表达式：" class="headerlink" title="三元表达式："></a>三元表达式：</h6><iframe height="265" scrolling="no" title="v-bind:style三元表达式" src="//codepen.io/w4ctech/embed/WJrmzv/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/WJrmzv/" target="_blank" rel="noopener">v-bind:style三元表达式</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h4 id="v-bind-src"><a href="#v-bind-src" class="headerlink" title="v-bind:src"></a>v-bind:src</h4><iframe height="265" scrolling="no" title="v-bind:src " src="//codepen.io/w4ctech/embed/gzPEQN/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/gzPEQN/" target="_blank" rel="noopener">v-bind:src </a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="6-v-on"><a href="#6-v-on" class="headerlink" title="6.v-on"></a>6.v-on</h3><iframe height="265" scrolling="no" title="v-on" src="//codepen.io/w4ctech/embed/ELKYOP/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/ELKYOP/" target="_blank" rel="noopener">v-on</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>v-on属性，用来绑定事件。<code>v-on:click=&quot;plus&quot;</code> 可以简写为 <code>@click=&quot;plus&quot;</code></p><h2 id="二-vue条件语句："><a href="#二-vue条件语句：" class="headerlink" title="二.vue条件语句："></a>二.vue条件语句：</h2><h3 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1.v-if"></a>1.v-if</h3>    <iframe height="265" scrolling="no" title="v-if" src="//codepen.io/w4ctech/embed/deGBjq/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/deGBjq/" target="_blank" rel="noopener">v-if</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe>  <p> v-if 指令将根据表达式isShow的值(true 或 false )来决定v-text 的文本内容是否显示</p><h3 id="2-v-else"><a href="#2-v-else" class="headerlink" title="2.v-else"></a>2.v-else</h3><iframe height="265" scrolling="no" title="v-else" src="//codepen.io/w4ctech/embed/odxzrN/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/odxzrN/" target="_blank" rel="noopener">v-else</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>v-else与v-if一起使用,当v-if为false的时候执行。</p><h3 id="3-v-else-if"><a href="#3-v-else-if" class="headerlink" title="3.v-else-if"></a>3.v-else-if</h3><iframe height="265" scrolling="no" title="v-else-if " src="//codepen.io/w4ctech/embed/erZBNb/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/erZBNb/" target="_blank" rel="noopener">v-else-if </a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p> v-else-if的语法是:</p><pre><code>v-if= &quot;color === &#39;red&#39;&quot;v-else-if= &quot;color === &#39;red&#39;&quot;v-else-if= &quot;color === &#39;red&#39;&quot;多个v-else-ifv-else</code></pre><p>v-else必须在 v-else-if 或 v-if 后使用。v-else-if 必须跟在 v-if 或者 v-else-if 之后。    </p><h3 id="4-v-show"><a href="#4-v-show" class="headerlink" title="4.v-show"></a>4.v-show</h3><iframe height="265" scrolling="no" title="v-show" src="//codepen.io/w4ctech/embed/XqddbQ/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/XqddbQ/" target="_blank" rel="noopener">v-show</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe> <!-- ### 5.v-hidev-hide这个指令在vue中没有，在angular中有这个ng-hide，[github关于v-hide的解释](https://github.com/vuejs/vue/issues/3601 "github关于v-hide的解释")<!-- ![v-hide是语法糖](https://s1.ax2x.com/2018/04/24/8pUpK.png "v-hide是语法糖") ``v-hide="var"`` 是纯粹的语法糖, 理解为 ``v-show="!var"``,但在vue.js中并没有v-hide这个属性<iframe height='265' scrolling='no' title='v-hide' src='//codepen.io/w4ctech/embed/mLPOpM/?height=265&theme-id=0&default-tab=html,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/w4ctech/pen/mLPOpM/'>v-hide</a> by w4ctech (<a href='https://codepen.io/w4ctech'>@w4ctech</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe> –&gt; -->]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue指令 </tag>
            
            <tag> vue条件语句 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>总结js循环遍历</title>
      <link href="/2018/04/18/js-loop-traversal/"/>
      <url>/2018/04/18/js-loop-traversal/</url>
      <content type="html"><![CDATA[<p>1 <code>for</code> 循环<br>语法：<code>for( 初始化; 循环执行条件; 每遍历一个元素后做的事情;){}</code><br><iframe height="300" scrolling="no" title="for循环" src="//codepen.io/w4ctech/embed/zjOVxy/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/zjOVxy/" target="_blank" rel="noopener">for循环</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><br><code>for</code>循环只能遍历数组, 不能遍历对象.</p><p>2 <code>do while</code> 循环<br>语法：<code>do{...}while(true)</code><br></p><p data-height="265" data-theme-id="0" data-slug-hash="WJeqvZ" data-default-tab="js,result" data-user="w4ctech" data-embed-version="2" data-pen-title="do...while" class="codepen">See the Pen <a href="https://codepen.io/w4ctech/pen/WJeqvZ/" target="_blank" rel="noopener">do...while</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><br><code>do while</code> 循环只保留对循环条件的判断，所以需要在循环内部使用<code>break</code>终止循环，如果不使用<code>break</code>终止，则会造成死循环；如果使用<code>continue</code>跳出本次循环，为了保证循环能够自动进入到下一次遍历。需要将<code>i++</code>遍历语句放在<code>while</code>头部。否则进入死循环<br><a href="https://simimg.com/i/lz67N" target="_blank" rel="noopener"><img src="https://s1.ax2x.com/2018/04/18/lz67N.md.png" alt="死循环"></a><p></p><p>3 <code>forEach</code> 循环<br>语法：<code>array.forEach(functtion(item,index){})</code>, <code>item</code>表示值，<code>index</code>表示索引。<br><iframe height="265" scrolling="no" title="forEach循环" src="//codepen.io/w4ctech/embed/BxBgoR/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/BxBgoR/" target="_blank" rel="noopener">forEach循环</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><br><code>forEach</code>无法在IE中使用；<code>forEach</code>无法使用<code>break</code>，<code>continue</code>跳出循环，使用<code>return</code>时，效果和在<code>for</code>循环中使用<code>continue</code>一致</p><p>4 <code>for in</code> 循环<br>语法 <code>for (var item in array){}</code>, <code>item</code> 可以是数组元素，也可以是对象的属性。<br><iframe height="300" scrolling="no" title="for in 循环 " src="//codepen.io/w4ctech/embed/zjOVve/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/zjOVve/" target="_blank" rel="noopener">for in 循环 </a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></p><p>5 <code>$.each</code> 循环<br>语法 <code>$.each(array|object,function(index,element))</code>,<code>index</code>表示当前索引值，<code>element</code>当前的元素。<br><iframe height="300" scrolling="no" title="$.each循环" src="//codepen.io/w4ctech/embed/KRPjVo/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/KRPjVo/" target="_blank" rel="noopener">$.each循环</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><br><code>this</code>指向当前属性的值。</p><p>6 <code>$(selecter).each</code> 循环<br>语法：<code>$(select|array|object).each(function(index,element))</code> ，可以遍历数组和对象。<br><iframe height="265" scrolling="no" title="$(selecter).each" src="//codepen.io/w4ctech/embed/pVzXRZ/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/pVzXRZ/" target="_blank" rel="noopener">$(selecter).each</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><br><code>this</code>表示当前遍历的值。不能调用<code>jQuery</code>方法, 如需调用<code>jquery</code>方法需要用<code>$</code>符号包裹.<code>$(this)</code></p><p>7 <code>map</code> 循环<br>语法：<code>array.map(function())</code><br><code>map()</code>方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组。<code>function</code>类型指定的处理函数。<br><iframe height="265" scrolling="no" title="map" src="//codepen.io/w4ctech/embed/jxOmwM/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/jxOmwM/" target="_blank" rel="noopener">map</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></p><p>原数组被“映射”成对应新数组：<br><iframe height="265" scrolling="no" title="理解map方法" src="//codepen.io/w4ctech/embed/wjvmRy/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/wjvmRy/" target="_blank" rel="noopener">理解map方法</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></p><p>map获取对象数组中的特定属性值：<br><iframe height="265" scrolling="no" title="map获取对象数组中的特定属性值" src="//codepen.io/w4ctech/embed/LmYmbx/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/LmYmbx/" target="_blank" rel="noopener">map获取对象数组中的特定属性值</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe></p><p>Array.prototype扩展可以让IE6-IE8浏览器也支持map方法：<br><iframe height="265" scrolling="no" title="Array.prototype扩展可以让IE6-IE8浏览器也支持map方法" src="//codepen.io/w4ctech/embed/vjYjZW/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/vjYjZW/" target="_blank" rel="noopener">Array.prototype扩展可以让IE6-IE8浏览器也支持map方法</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><br><a href="https://juejin.im/post/5a70280d6fb9a01cc026884b" target="_blank" rel="noopener">map()和filter()详解</a></p><p>8 <code>every</code>循环<br>语法：<code>array.every(function(item, index, array))</code> <code>item</code> 当前元素的值，<code>index</code> 当前元素索引值，<code>array</code>  当前元素属于的数组对象<br><iframe height="265" scrolling="no" title="every方法" src="//codepen.io/w4ctech/embed/XqWBJP/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/XqWBJP/" target="_blank" rel="noopener">every方法</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><br><code>every()</code> 不会对空数组进行检测;<code>every()</code> 不会改变原始数组<br><code>arr.every(callback[, thisArg]) every</code>方法用于检验数组中的每一项是否符合某个条件, 若符合则放回<code>true</code>, 反之则返回<code>false</code>.</p><p><code>arr.every(function(item,index,arr){console.info(item);return true});</code></p><ol><li><code>every</code>遇到<code>return</code>则返回,不再往下执行</li></ol><p><code>arr.every(function(item,index,arr){console.info(item););</code></p><ol start="2"><li>没有<code>return</code>时,只执行一次则默认返回<code>false</code></li></ol>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js数组 </tag>
            
            <tag> js对象 </tag>
            
            <tag> js循环 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Canvas——保存和恢复绘图状态</title>
      <link href="/2018/04/15/canvas-save-restore-drawing-status/"/>
      <url>/2018/04/15/canvas-save-restore-drawing-status/</url>
      <content type="html"><![CDATA[<h3 id="画布绘图状态"><a href="#画布绘图状态" class="headerlink" title="画布绘图状态"></a>画布绘图状态</h3><p>描述某一时刻2D渲染上下文外观的整套属性，从简单的颜色值到复杂的变换矩阵及其他特性。</p><h3 id="描述画布绘图状态的全部属性"><a href="#描述画布绘图状态的全部属性" class="headerlink" title="描述画布绘图状态的全部属性"></a>描述画布绘图状态的全部属性</h3><p>变换矩阵、裁剪区域、globalAlpha、globalCompositeOperation、strokeStyle、fillStyle、lineWidth、lineCap、lineJoin、miterLimit、shadowOffsetX、shadowOffsetY、shadowBlur、shadowColor、font、textAlign 和 textBaseline.</p><h3 id="保存绘图状态——save"><a href="#保存绘图状态——save" class="headerlink" title="保存绘图状态——save()"></a>保存绘图状态——save()</h3><p>当你保存绘图状态时，2D渲染上下文会保存一个绘图状态栈，它是一组之前保存的状态，其中最近保存的状态位于顶部——就像一张纸。绘图状态的默认栈是空的，调用save方法，就会有一个新状态被添加到这个栈。多次调用save方法，就可以将多个绘图状态逐一保存到栈中，其中最早的状态在底部。（下面的例子调用了save()方法保存了fillStyle = “red”状态。）</p><h3 id="恢复绘图状态——restore"><a href="#恢复绘图状态——restore" class="headerlink" title="恢复绘图状态——restore()"></a>恢复绘图状态——restore()</h3><p>通过调用restore方法，你能够自动取出最后添加到栈中的绘图状态，并将它应用于2D渲染上下文，用所保存的状态覆盖全部现有的样式。（下面的例子在设置了fillStyle = “blue”之后又调用了restore()方法恢复了之前已有的fillStyle = “red”状态。）</p><iframe height="265" scrolling="no" title="保存和恢复多个绘图状态" src="//codepen.io/w4ctech/embed/zWVmYJ/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/zWVmYJ/" target="_blank" rel="noopener">保存和恢复多个绘图状态</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="保存和恢复多个绘图状态"><a href="#保存和恢复多个绘图状态" class="headerlink" title="保存和恢复多个绘图状态"></a>保存和恢复多个绘图状态</h3><p>理解新增的项（状态）被添加到栈的顶部，并且它们是从栈顶部取回的。即后进先出的机制，最近保存到栈的绘图状态将是后来第一个恢复的状态。（修改前面的例子，在fillStyle = “blue”之后保存绘图状态，然后调用两次restore()方法，依次恢复了blue和red状态。）</p><iframe height="265" scrolling="no" title="保存和恢复多个绘图状态" src="//codepen.io/w4ctech/embed/mxZzPe/?height=265&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/w4ctech/pen/mxZzPe/" target="_blank" rel="noopener">保存和恢复多个绘图状态</a> by w4ctech (<a href="https://codepen.io/w4ctech" target="_blank" rel="noopener">@w4ctech</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/15/hello-world/"/>
      <url>/2018/04/15/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> hello word </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello word </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/404.html"/>
      <url>/404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE html><html style="display: none;" lang="zh"><head>    <meta charset="utf-8">    <meta http-equiv="x-dns-prefetch-control" content="on">    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">    <meta name="renderer" content="webkit">    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">    <title> w4ctech-404 </title>    <link rel="icon shortcut" type="image/ico" href="/img/favicon.jpg">    <link rel="icon" href="/img/favicon.jpg">    <meta name="format-detection" content="telephone=no">    <meta name="description" itemprop="description" content="w4ctech-风起于青萍之末，浪成于微澜之间。">    <meta name="keywords" content="w4ctech-风起于青萍之末，浪成于微澜之间。">    <meta name="theme-color" content="#0097A7">    <meta http-equiv="Cache-Control" content="no-transform">    <meta http-equiv="Cache-Control" content="no-siteapp"></head><body><script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="https://w3ctech.coding.me/?from=http://w3ctech.coding.me" homepagename="回到主页"></script></body></html>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/vue-life-cycle.html"/>
      <url>/vue-life-cycle.html</url>
      <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8">    <title>vue-life-cycle</title>    <script type="text/javascript" src="https://cdn.jsdelivr.net/vue/2.1.3/vue.js"></script></head><body><div id="app">     <p></p></div><script type="text/javascript">  var app = new Vue({      el: '#app',      data: {          message : "vue life-cycle"      },       beforeCreate: function () {            // 实例创建前：这个阶段实例的data、methods是读不到的。           console.group('beforeCreate 创建前状态===============》');              console.log("%c%s", "color:red" , "el     : " + this.$el);   //undefined            console.log("%c%s", "color:red","data   : " + this.$data);   //undefined            console.log("%c%s", "color:red","message: " + this.message)  //undefined         },        created: function () {            // 实例创建后：这个阶段已经完成了数据观测(data observer)，属性和方法的运算， watch/event 事件回调。mount挂载阶段还没开始，$el 属性目前不可见，数据并没有在DOM元素上进行渲染。            console.group('created 创建完毕状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el);   //undefined            console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化            console.log("%c%s", "color:red","message: " + this.message); //已被初始化        },        beforeMount: function () {            // 在挂载开始之前被调用：相关的 render 函数首次被调用。            console.group('beforeMount 挂载前状态===============》');            console.log("%c%s", "color:red","el     : " + (this.$el)); //已被初始化            console.log(this.$el);            console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化            console.log("%c%s", "color:red","message: " + this.message); //已被初始化        },        mounted: function () {            //  el选项的DOM节点 被新创建的 vm.$el 替换，并挂载到实例上去之后调用此生命周期函数。此时实例的数据在DOM节点上进行渲染。            console.group('mounted 挂载结束状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el); //已被初始化            console.log(this.$el);            console.log("%c%s", "color:red","data   : " + this.$data); //已被初始化            console.log("%c%s", "color:red","message: " + this.message); //已被初始化        },        beforeUpdate: function () {            // 数据更新时调用，但不进行DOM重新渲染，在数据更新时DOM没渲染前可以在这个生命函数里进行状态处理。            console.group('beforeUpdate 更新前状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el);            console.log(this.$el);               console.log("%c%s", "color:red","data   : " + this.$data);               console.log("%c%s", "color:red","message: " + this.message);        },        updated: function () {            //  这个状态下数据更新并且DOM重新渲染，当这个生命周期函数被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。当实例每次进行数据更新时updated都会执行。            console.group('updated 更新完成状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el);            console.log(this.$el);               console.log("%c%s", "color:red","data   : " + this.$data);               console.log("%c%s", "color:red","message: " + this.message);        },        beforeDestroy: function () {            // 实例销毁之前调用。实例仍然可用            console.group('beforeDestroy 销毁前状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el);            console.log(this.$el);            console.log("%c%s", "color:red","data   : " + this.$data);            console.log("%c%s", "color:red","message: " + this.message);        },        destroyed: function () {            //  Vue实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。            console.group('destroyed 销毁完成状态===============》');            console.log("%c%s", "color:red","el     : " + this.$el);            console.log(this.$el);            console.log("%c%s", "color:red","data   : " + this.$data);            console.log("%c%s", "color:red","message: " + this.message)        }    })</script></body></html>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<pre><code>    &lt;!-- &lt;p&gt;待他日能够成为一名真正的前端工程师的时候再写吧&lt;/p&gt; --&gt;</code></pre>]]></content>
    </entry>
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>友链</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>timeline</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
